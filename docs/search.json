[
  {
    "objectID": "posts/Post1/Post1.html",
    "href": "posts/Post1/Post1.html",
    "title": "Linear and Curvilinear Regression - an overview with examples",
    "section": "",
    "text": "#Load the packages + datasets we will be using\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.2\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr)\ncyclingstudy &lt;- read.csv(\"C:/Users/ketil/Documents/cyclingstudy.csv\")\nopenpowerlifting &lt;- read_csv(\"~/Datasett/openpowerlifting.csv\")\n\nRows: 3675423 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (19): Name, Sex, Event, Equipment, AgeClass, BirthYearClass, Division, ...\ndbl  (22): Age, BodyweightKg, Squat1Kg, Squat2Kg, Squat3Kg, Squat4Kg, Best3S...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/Post1/Post1.html#introduction",
    "href": "posts/Post1/Post1.html#introduction",
    "title": "Linear and Curvilinear Regression - an overview with examples",
    "section": "Introduction",
    "text": "Introduction\nThis post explains what I learned about regression analysis."
  },
  {
    "objectID": "posts/Post1/Post1.html#linear-regression",
    "href": "posts/Post1/Post1.html#linear-regression",
    "title": "Linear and Curvilinear Regression - an overview with examples",
    "section": "Linear Regression",
    "text": "Linear Regression\nAll graphs and functions will be based on the following data sets: cyclingstudy, openpowerlifting\n\nA linear model or function is used to predict the outcome of y (dependent variable), based on the value of x (the independent variable). A linear model is best fitted for variables which have a linear relationship. An example of this would be VO2-max and height, with height being the independent variable and VO2-max being the dependent variable.\nIt can be described using the function seen below in R. This function essentially states that VO2-max is dependent on height, and we are using a data set to base this function of. We will then get an ‘intercept’ and your slope. More precisely, we can say that this is your regression coefficient.\nThe linear regression function in R is the following:\n\nlinear.function &lt;- lm(y ~ x, data = my.data)\n\nOnce we’ve gotten the values of the intercept and slope, we can predict values of y with any value of x."
  },
  {
    "objectID": "posts/Post1/Post1.html#curvilinear-regression",
    "href": "posts/Post1/Post1.html#curvilinear-regression",
    "title": "Linear and Curvilinear Regression - an overview with examples",
    "section": "Curvilinear Regression",
    "text": "Curvilinear Regression\nThis is essentially a function that describes the non-linear relationship between variables. This is a more fitting function to use, if we want to say compare the relationship of age on VO2-max. The relationship will most likely not be linear, as beyond a certain age your VO2-max will most likely regress.\nThis is described with the following R function:\n\ncurvilinear.function &lt;- lm(y ~ x + I(x^2), data = my.data)"
  },
  {
    "objectID": "posts/Post1/Post1.html#a-visual-comparison",
    "href": "posts/Post1/Post1.html#a-visual-comparison",
    "title": "Linear and Curvilinear Regression - an overview with examples",
    "section": "A visual comparison",
    "text": "A visual comparison\n\nggplot(cyclingstudy, aes(x = height.T1, y = VO2.max)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = \"Linear regression plot\",\n    x = \"Height\",\n    y = \"VO2-max\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nggplot(cyclingstudy, aes(x = age, y = VO2.max)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x + I(x^2)) +\n  labs(\n    title = \"Curvilinear regression plot\",\n    x = \"Age\",\n    y = \"VO2-max\"\n  ) +\n  theme_bw()\n\n\n\n\n\n\n\n\nIdeally we would like a more visually striking difference between the two graphs. In this case, it looks like a linear regression would still be the best fit for age and VO2-max, as it seems their relationship is mostly linear. Therefore, we will be taking a closer look at the “Openpowerlifting” data set, containing lifting information from millions of lifters across decades of competitions, alongside other variables."
  },
  {
    "objectID": "posts/Post1/Post1.html#examining-linear-and-curvilinear-regressions-with-the-openpowerlifting-data-set",
    "href": "posts/Post1/Post1.html#examining-linear-and-curvilinear-regressions-with-the-openpowerlifting-data-set",
    "title": "Linear and Curvilinear Regression - an overview with examples",
    "section": "Examining linear and curvilinear regressions with the “Openpowerlifting” data set",
    "text": "Examining linear and curvilinear regressions with the “Openpowerlifting” data set\nThis data set contains well over 3 millions rows, and 42 variables. To make this data set more manageable to work with (and less computer-intensive), I will be cleaning up the data set and only choosing a sample from that cleaned-up version to present graphs and functions with. Since the samples will still be incredibly large, we can be fairly confident that we will still get a result that is generalisable to the entire data set.\n\n#Let's take a look at our data\n\ndim(openpowerlifting)\n\n[1] 3675423      42\n\n#Lets clean up the data\n\npowerlifting_clean &lt;- openpowerlifting |&gt;\n  filter(\n    Age &gt;= 15 & Age &lt;= 90, #Reasonable age ranges\n    !is.na(Dots), #Has a DOTs score\n    !is.na(TotalKg), #Recorded a total\n    TotalKg &gt; 0,\n    Equipment == \"Raw\", #Competed RAW, not equipped\n    !is.na(BodyweightKg), #Weight class\n    Sex %in% c(\"M\", \"F\"),\n    !is.na(Tested) #Drug-tested only \n  )\n\n#Take a random sample of the cleaned up data\n\nset.seed(123)\nsample.data &lt;- powerlifting_clean |&gt;\n  sample_n(5000)\n\ncat(\"Sample size\", nrow(sample.data), \"rows\\n\")\n\nSample size 5000 rows\n\n\nNow that we’ve cleaned up the data, we need to figure out which variables we want to assess. An easy one is how bodyweight in KG affects your totalKg, with bodyweight being the independent variable, and the total being the dependent variable. We can reasonably assume that these two variables will have a linear relationship, as bigger people tend to be stronger.\n\n#Linear regression function\n\nm &lt;- lm(TotalKg ~ BodyweightKg, data = powerlifting_clean)\n\n#How much does your total increase by going from 90 to 100kg?\ny2 &lt;- predict(m, newdata = data.frame(BodyweightKg = 90))\ny1 &lt;- predict(m, newdata = data.frame(BodyweightKg = 100))\n\ndifference &lt;- y1 - y2\ncat(\"Increase:\", round(difference, 1), \"kg\\n\")\n\nIncrease: 32.8 kg\n\n#Lets plot the  relationship between the variables\n\nggplot(sample.data, aes(x = BodyweightKg, y = TotalKg, color = Sex)) +\n  geom_point(alpha = 0.3, size = 1) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  theme_minimal() +\n  labs(\n    title = \"Relationship between bodyweight and strength\",\n    x = \"Bodyweight (kg)\",\n    y = \"Total (kg)\"\n  )\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nUnsurprisingly, we can see a fairly linear relationship between body weight and total amount of weight lifted. There is however a lot of variance in this data set, as one would expect as it compiles data from hobbyista competing for their first time to world-class lifters.\nLet’s examine how DOTS is affected by age, and if this shows a curvilinear relationship. In simple terms, DOTS is a mathematical equation that takes both weight lifted and body weight into account, producing a score that makes comparison between different weight classes possible. Whether DOTS is the fairest way to do this, is another can of worms and somewhat controversial. However, we might excpect there to be a peak around age 30 - 40 for DOTS, before it dips as we get older. Let’s take a look.\n\n#Lets take the same sample data and look at a curvilinear relationship\n\nlm(Dots ~ Age + I(Age^2), data = powerlifting_clean)\n\n\nCall:\nlm(formula = Dots ~ Age + I(Age^2), data = powerlifting_clean)\n\nCoefficients:\n(Intercept)          Age     I(Age^2)  \n  282.16792      1.45536     -0.05137  \n\nggplot(sample.data, aes(x = Age, y = TotalKg)) +\n  geom_point(alpha = 0.2, size = 0.8) +\n  geom_smooth(method = \"lm\", formula = y ~ x + I(x^2), \n              color = \"red\", size = 1) +\n  labs(\n    title = \"Curvilinear Regression: Age vs Total Lifted\",\n    x = \"Age (years)\",\n    y = \"Total Lifted (kg)\",\n    caption = \"Peak performance around age 25-35, then declines\"\n  ) +\n  theme_minimal()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "posts/Post1/Post1.html#exploring-other-things-in-the-data-set",
    "href": "posts/Post1/Post1.html#exploring-other-things-in-the-data-set",
    "title": "Linear and Curvilinear Regression - an overview with examples",
    "section": "Exploring other things in the data set",
    "text": "Exploring other things in the data set\nCuriosity got the better of me, and I would like to see how I stack up with lifters in my same age and weight bracket.\n\npowerlifting.me &lt;- powerlifting_clean |&gt;\n  filter(\n    BodyweightKg &gt;= 90 & BodyweightKg &lt;= 100,\n    Sex == \"M\",\n    Age &gt;= 25 & Age &lt;= 30\n  )\n\n\n\n# Histogram\nggplot(powerlifting.me, aes(x = TotalKg)) +\n  geom_histogram(color = \"blue\") +\n  labs(\n    title = \"Histogram of totals in KG\"\n  ) +\n  theme_bw()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n# Boxplot\n\nggplot(powerlifting.me, aes(x = \"\", y = TotalKg)) +\n  geom_boxplot(fill = \"orange\", width = 0.5) +\n  geom_hline(yintercept = 630, color = \"red\", linetype = \"dashed\") +\n  scale_y_continuous(breaks = seq(0, 900, by = 100)) +\n  labs(title = \"Distribution of Totals\")\n\n\n\n\n\n\n\n\nAs we can see here, a total of above 650kg puts you above the 75th percentile of competitive powerlifters. Unfortunately for me, I’m not quite there yet as you see by the red dashed line (total of 630 kg)."
  },
  {
    "objectID": "posts/Post1/Post1.html#summary",
    "href": "posts/Post1/Post1.html#summary",
    "title": "Linear and Curvilinear Regression - an overview with examples",
    "section": "Summary",
    "text": "Summary\nWe have looked at both linear and multilinear regressions. Next time, I’m going to explore multiple regressions."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Trial and Error",
    "section": "",
    "text": "This is my personal blog where I document what I learn, through a painful process of trial and error."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Trial and Error",
    "section": "",
    "text": "This is my personal blog where I document what I learn, through a painful process of trial and error."
  },
  {
    "objectID": "index.html#recent-posts",
    "href": "index.html#recent-posts",
    "title": "Trial and Error",
    "section": "Recent Posts",
    "text": "Recent Posts\nComing soon"
  },
  {
    "objectID": "index.html#quarto",
    "href": "index.html#quarto",
    "title": "Trial and Error",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "index.html#running-code",
    "href": "index.html#running-code",
    "title": "Trial and Error",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  }
]